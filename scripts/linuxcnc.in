#!/bin/bash
prefix=@prefix@
exec_prefix=@exec_prefix@
LSMOD=@LSMOD@
PIDOF="@PIDOF@ -x"
PS=@PS@
AWK=@AWK@
IPCS=@IPCS@
KILL=@KILL@

LINUXCNC_HOME=@EMC2_HOME@; export LINUXCNC_HOME
LINUXCNC_BIN_DIR=@EMC2_BIN_DIR@
LINUXCNC_TCL_DIR=@EMC2_TCL_DIR@
LINUXCNC_HELP_DIR=@EMC2_HELP_DIR@
LINUXCNC_RTLIB_DIR=@EMC2_RTLIB_DIR@
LINUXCNC_CONFIG_PATH="@LINUXCNC_CONFIG_PATH@"
LINUXCNC_NCFILES_DIR=@EMC2_NCFILES_DIR@
LINUXCNC_LANG_DIR=@EMC2_LANG_DIR@
REALTIME=@REALTIME@
LINUXCNC_IMAGEDIR=@EMC2_IMAGE_DIR@
LINUXCNC_TCL_LIB_DIR=@EMC2_TCL_LIB_DIR@
HALLIB_DIR=@HALLIB_DIR@; export HALLIB_DIR
HALLIB_PATH=.:$HALLIB_DIR; export HALLIB_PATH
PATH=$LINUXCNC_BIN_DIR:$PATH


#echo "I am linuxcnc (shell under scripts)"
#echo "prefix=${prefix}"
#echo "exec_path=${exec_prefix}"
#echo "PATH=${PATH}"

################################################################################
# 4. done with function definitions, execution resumes here
################################################################################

# Name of lock file to check for that signifies that LinuxCNC is up,
# to prevent multiple copies of controller
LOCKFILE=/tmp/linuxcnc.lock

function Cleanup(){
    rm -f $LOCKFILE;
    return 0;
}

# Check for lock file
if [ -f $LOCKFILE ]; then
  if tty -s; then
    echo -n "LinuxCNC is still running.  Restart it? [Y/n] "
    read input; [ -z $input ] && input=y
  else
  input=y
  fi
  case $input in
    y|Y|yes)
      Cleanup other
      echo You want to clean up old LinuxCNC,as your wish.
      exit 0
    ;;
    *)
      echo Not starting new LinuxCNC
      exit 0
    ;;
  esac
fi
echo Starting LinuxCNC...


# trap ^C so that it's called if user interrupts script
trap 'Cleanup ; exit 0' SIGINT SIGTERM

#cd "$INI_DIR"

# Create the lock file
touch $LOCKFILE


