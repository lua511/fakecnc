#!/bin/bash
################################################################################
# usage: linuxcnc [options] [<ini-file>]
#
# options:
#     -v = verbose - prints info as it works
#     -d = echos script commands to screen for debugging
################################################################################

################################################################################
# Author: winter.yang
# License: GPL Version 2
################################################################################

################################################################################
# 0. Values that come from configure
################################################################################
prefix=@prefix@
exec_prefix=@exec_prefix@
LSMOD=@LSMOD@
PIDOF="@PIDOF@ -x"
PS=@PS@
AWK=@AWK@
IPCS=@IPCS@
KILL=@KILL@

LINUXCNC_HOME=@EMC2_HOME@; export LINUXCNC_HOME
LINUXCNC_BIN_DIR=@EMC2_BIN_DIR@
LINUXCNC_FAKEBIN_DIR=@EMC2_FAKEBIN_DIR@
LINUXCNC_TCL_DIR=@EMC2_TCL_DIR@
LINUXCNC_HELP_DIR=@EMC2_HELP_DIR@
LINUXCNC_RTLIB_DIR=@EMC2_RTLIB_DIR@
LINUXCNC_CONFIG_PATH="@LINUXCNC_CONFIG_PATH@"
LINUXCNC_NCFILES_DIR=@EMC2_NCFILES_DIR@
LINUXCNC_LANG_DIR=@EMC2_LANG_DIR@
REALTIME=@REALTIME@
LINUXCNC_IMAGEDIR=@EMC2_IMAGE_DIR@
LINUXCNC_TCL_LIB_DIR=@EMC2_TCL_LIB_DIR@
HALLIB_DIR=@HALLIB_DIR@; export HALLIB_DIR
HALLIB_PATH=.:$HALLIB_DIR; export HALLIB_PATH
PATH=$LINUXCNC_BIN_DIR:$PATH
PATH=$LINUXCNC_FAKEBIN_DIR:$PATH
[ -d $LINUXCNC_HOME/scripts ] && PATH=$LINUXCNC_HOME/scripts:$PATH

if test "xyes" = "x@RUN_IN_PLACE@"; then
	if [ -z "$LD_LIBRARY_PATH" ]; then
	    LD_LIBRARY_PATH=$LINUXCNC_HOME/lib
	else
	    LD_LIBRARY_PATH=$LINUXCNC_HOME/lib:"$LD_LIBRARY_PATH"
	fi
	export LD_LIBRARY_PATH
fi

if [ -z "$PYTHONPATH" ]; then
    PYTHONPATH=$LINUXCNC_HOME/lib/python
else
    PYTHONPATH=$LINUXCNC_HOME/lib/python:"$PYTHONPATH"
fi
export PYTHONPATH

PRELOAD_WORKAROUND=@PRELOAD_WORKAROUND@

XFILESEARCHPATH=%D:@EMC2_HOME@/%T/%N%C:@EMC2_HOME@/%T/%N
export XFILESEARCHPATH

MODULE_EXT=@MODEXT@ # module extension, used when insmod'ing

DEBUG_FILE=$(mktemp /tmp/linuxcnc.debug.XXXXXX)
PRINT_FILE=$(mktemp /tmp/linuxcnc.print.XXXXXX)

program_available () {
    type -path "$1" > /dev/null 2>&1
}

usage () {
	P=${0##*/}
	cat <<EOF
$P: Run LINUXCNC

Usage:
	$P [-d] [-v]
		Choose the configuration file graphically

	$P [-k] [-d] [-v] path/to/your.ini
		Name the configuration file using its path

	$P [-k] [-d] [-v] -l
		Use the previous configuration file

	-d: Turn on "debug" mode
	-v: Turn on "verbose" mode
        -k: Continue in the presence of errors in .hal files
EOF
}
################################################################################
# 1.1. strip and process command line options
################################################################################
while getopts "dvlhkr" opt
do
	case "$opt" in
	d)
		# enable echoing of script and command output
		if tty -s; then
		    DEBUG_FILE=/dev/fd/2
		    echo "Debug mode on" >$DEBUG_FILE
		fi
		set -x;;
	v)
		# enable printing of verbose messages
		if tty -s; then
		    PRINT_FILE=/dev/fd/1
		    echo "Verbose mode on" >$PRINT_FILE
		fi;;
        r)
                RUNTESTS=yes
                ;;
	l)
		USE_LAST_INIFILE=1;;
        k)      DASHK=-k;;
	h)
		usage
		exit 0;;
	*)
		usage
		exit 1
	esac
done
shift $(($OPTIND-1))

case "@KERNEL_VERS@" in
"") ;;
"test") echo "kernel_vers=test" ;;
*)
    if [ `uname -r` != "@KERNEL_VERS@" ]; then
        if tty -s; then
            echo "LinuxCNC requires the real-time kernel @KERNEL_VERS@ to run."
            echo "Before running LinuxCNC, reboot and choose this kernel at the boot menu."
        else
            @WISH@ <<EOF
                wm wi .
                tk_messageBox -type ok \
                    -title LinuxCNC -icon error -title "Realtime Kernel Required" \
                    -message {LinuxCNC requires the real-time kernel @KERNEL_VERS@ to run.  Before running LinuxCNC, reboot and choose this kernel at the boot menu.}
                exit
EOF
        fi
        exit
    fi
esac

if [ -z $RUNTESTS ]; then
if ! tty -s; then
    exec 2>> $DEBUG_FILE
    exec >> $PRINT_FILE
fi
fi

function ErrorCheck () {
    result=$?
    if [ ! -z "$DISPLAY" ]; then
        echo "catch {send -async popimage destroy .}; destroy ." | @WISH@x
    fi

    if [ $result -ne 0 ]; then
        if tty -s || [ -z "$DISPLAY" ] ; then
            if [ -f $DEBUG_FILE ]; then
                cp $DEBUG_FILE $HOME/linuxcnc_debug.txt
            else
                echo "(debug information was sent to stderr)" \
                    > $HOME/linuxcnc_debug.txt
            fi

            if [ -f $PRINT_FILE ]; then
                cp $PRINT_FILE $HOME/linuxcnc_print.txt
            else
                echo "(print information was sent to stdout)" \
                    > $HOME/linuxcnc_print.txt
            fi

            echo "\
LinuxCNC terminated with an error.  You can find more information in the log:
    $HOME/linuxcnc_debug.txt
and
    $HOME/linuxcnc_print.txt
as well as in the output of the shell command 'dmesg' and in the terminal"
        else
            @WISH@ $LINUXCNC_TCL_DIR/show_errors.tcl $DEBUG_FILE $PRINT_FILE
        fi
    fi
    rm -f $DEBUG_FILE $PRINT_FILE 2>/dev/null
    exit $result
}

trap ErrorCheck EXIT

################################################################################
# 1.3. INIFILE                           find inifile to use                   #
################################################################################
if [ ! -z "$1" ]; then
    case "$1" in
      -)  USE_LAST_INIFILE=1;;
      /*) INIFILE="$1" ;;
      *)  INIFILE="`pwd`/$1";;
    esac
    shift
fi
EXTRA_ARGS="$@"

# 1.3.1. Determine if we have run-in place or installed system
# run in place : true
RUN_IN_PLACE=@RUN_IN_PLACE@
echo RUN_IN_PLACE=$RUN_IN_PLACE >>$PRINT_FILE

LINUXCNCVERSION="@EMC2VERSION@"; export LINUXCNCVERSION

INIVAR=inivar
HALCMD="halcmd $DASHK"
PICKCONFIG="@WISH@ $LINUXCNC_TCL_DIR/bin/pickconfig.tcl"
LINUXCNC_EMCSH=@WISH@

echo LINUXCNC_DIR=$LINUXCNC_DIR >>$PRINT_FILE
echo LINUXCNC_BIN_DIR=$LINUXCNC_BIN_DIR >>$PRINT_FILE
echo LINUXCNC_TCL_DIR=$LINUXCNC_TCL_DIR >>$PRINT_FILE
echo LINUXCNC_SCRIPT_DIR=$LINUXCNC_SCRIPT_DIR >>$PRINT_FILE
echo LINUXCNC_RTLIB_DIR=$LINUXCNC_RTLIB_DIR >>$PRINT_FILE
echo LINUXCNC_CONFIG_DIR=$LINUXCNC_CONFIG_DIR >>$PRINT_FILE
echo LINUXCNC_LANG_DIR=$LINUXCNC_LANG_DIR >>$PRINT_FILE
echo INIVAR=$INIVAR >>$PRINT_FILE
echo HALCMD=$HALCMD >>$PRINT_FILE
echo LINUXCNC_EMCSH=$LINUXCNC_EMCSH >>$PRINT_FILE

#export some common directories, used by some of the GUI's
export LINUXCNC_TCL_DIR
export LINUXCNC_EMCSH
export LINUXCNC_HELP_DIR
export LINUXCNC_LANG_DIR
export REALTIME
export HALCMD
export LINUXCNC_NCFILES_DIR

[ -z $RUNTESTS ] && echo "LINUXCNC - $LINUXCNCVERSION" 

# was an inifile specified on the command line?
if [ ! -z "$USE_LAST_INIFILE" ]; then
    INIFILE=$($INIVAR -ini ~/.linuxcncrc -var LAST_CONFIG -sec PICKCONFIG 2>>$DEBUG_FILE)
    echo "Using previous inifile: $INIFILE" >> $PRINT_FILE
fi

if [ ! -n "$INIFILE" ] ; then
    # nothing specified, get from the user
    # it returns either a path, or nothing at all
    INIFILE=$($PICKCONFIG)
    # if name is xxxx.demo, then:
    #    execute xxxx.demo in background and exit
    if [ "${INIFILE%%.demo}".demo = "${INIFILE}" ] ; then
      "${INIFILE}" &
      exit 0
    fi
fi

if [ ! -n "$INIFILE" ] ; then
    # still nothing specified, exit
    exit 0
fi

function handle_includes () {
  hdr="# handle_includes():"
  inifile="$1"
  cd "$(dirname $inifile)" ;# for the function() subprocess only
  grep "^#INCLUDE" "$inifile" >/dev/null
  status=$?
  if [ $status -ne 0 ] ; then
    echo "$inifile" ;# just use the input
    return 0 ;# ok
  fi
  outfile="$(dirname $inifile)/$(basename $inifile).expanded"
  >|"$outfile"
  echo "#*** $outfile" >>"$outfile"
  echo "#*** Created: $(date)" >>"$outfile"
  echo "#*** Autogenerated file with expanded #INCLUDEs" >>"$outfile"
  echo "" >>"$outfile"
  line=0
  while read a b ; do
    line=$((line + 1))
    if [ "$a" = "#INCLUDE" ] ; then
       if [ "X$b" = "X" ] ; then
          msg="$hdr <$line> found #INCLUDE with no filename" >>"$outfile"
          echo "$msg" >&2
          echo "$msg" >>"$outfile"
       else
          # expand file name
          breal=$(eval echo "$b")
          # -r: readable
          if  [ -r "$breal" ] ; then
            echo "" >>"$outfile"
            echo "#*** Begin #INCLUDE file: $breal" >>"$outfile"
            cat "$breal" >>"$outfile"
            echo "#*** End   #INCLUDE file: $breal" >>"$outfile"
          else
            msg="$hdr <$line> CANNOT READ $breal"
            echo "$msg" >&2
            echo "$msg" >>"$outfile"
          fi
       fi
    else
       echo "$a $b" >> "$outfile"
    fi
  done <"$inifile"
  echo "$outfile" ;# use the expanded file
  return 0 ;# ok
}

function split_app_items () {
  app_name=$1
  shift
  app_args=$*
}

function run_applications () {
    NUM=1
    APPFILE=`$INIVAR -tildeexpand -ini "$INIFILE" -var APP -sec APPLICATIONS -num $NUM 2> /dev/null`
    if [ -z "$APPFILE" ] ; then return ; fi
    DEFAULT_APPLICATION_DELAY=0
    GetFromIni DELAY APPLICATIONS
    DELAY=${retval:-$DEFAULT_APPLICATION_DELAY}
    while [ -n "$APPFILE" ] ; do
       split_app_items $APPFILE # --> app_name app_args
       # try all explicit specifications before trying PATH
       case "$app_name" in
         /*) # absolute pathname
             exe_name=$app_name;;
       \./*) # name relative to inifile directory
             exe_name="$(pwd)/$app_name";;
          *) # try local first then PATH
             exe_name=$(pwd)/$app_name
             if [ ! -x $exe_name ] ; then
               exe_name=$(which $app_name)
             fi
       esac
       if [ ! -f "$exe_name" ] ; then
          echo "APP: Cannot find executable file for: <$app_name>"
       else
          if [ ! -x "$exe_name" ] ; then
             echo "APP: File not executable: <$exe_name>"
          else
             echo "APP: $app_name found: <$exe_name>"
             (sleep $DELAY; eval $exe_name $app_args) &
          fi
       fi
       NUM=$(($NUM+1))
       APPFILE=`$INIVAR -tildeexpand -ini "$INIFILE" -var APP -sec APPLICATIONS -num $NUM 2> /dev/null`
    done
}

INIFILE="$(handle_includes "$INIFILE")"

# delete directories from path, save name only
INI_NAME="${INIFILE##*/}"
INI_DIR="${INIFILE%/*}"
CONFIG_DIR="${INIFILE%/*}"
export CONFIG_DIR
export PATH=$CONFIG_DIR/bin:$PATH

[ -z $RUNTESTS ] && echo "Machine configuration directory is '$INI_DIR'"
echo "Machine configuration file is '$INI_NAME'"

# make sure ini file exists (the tcl script just did this, so we could 
# eliminate this test, but it does no harm)

if [ ! -f "$INIFILE" ] ; then
    echo "Could not find ini file '$INIFILE'"
    trap '' EXIT
    exit -1
fi
echo INIFILE="$INIFILE" >>$PRINT_FILE

################################################################################
# 2.  extract info from the ini file that we will need later
################################################################################
retval=

# 2.1. define helper function
function GetFromIniQuiet {
    #$1 var name   $2 - section name
    name=$1
    retval=`$INIVAR -ini "$INIFILE" -var $1 -sec $2 2> /dev/null`
    if [ ! -n "$1" ] ; then
	exit -1
    fi
    echo "$name=$retval" >>$PRINT_FILE
}

function GetFromIni {
    #$1 var name   $2 - section name
    name=$1
    retval=`$INIVAR -ini "$INIFILE" -var $1 -sec $2 2>>$DEBUG_FILE`
    if [ ! -n "$1" ] ; then
	echo "Can't find variable $1 in section [$2] of file $INIFILE."
	exit -1
    fi
    echo "$name=$retval" >>$PRINT_FILE
}

function GetFromIniEx {
    original_var="[$2]$1"
    while [ $# -ge 2 ]; do
	if retval=`$INIVAR -ini "$INIFILE" -var "$1" -sec "$2" 2>/dev/null`; then return; fi
	shift 2
    done
    if [ $# -eq 0 ]; then
	echo "Can't find $original_var in $INIFILE."
	exit -1
    fi
    retval="$1"
}

# 2.2. get param file
GetFromIni PARAMETER_FILE RS274NGC 
RS274NGC_PARAMFILE=$retval

# 2.3. get mot information
GetFromIniEx MOT MOT EMCMOT EMCMOT motmod
EMCMOT=$retval$MODULE_EXT # add module extension

# 2.4. get io information
GetFromIniEx IO IO EMCIO EMCIO io
EMCIO=$retval

# 2.5. get task information
GetFromIni TASK TASK
EMCTASK=$retval

if [ "$EMCTASK" = emctask ]; then EMCTASK=linuxcnctask; fi

# 2.6. we hardcode the server name, change if needed
# linuxcncsvr now holds/creates all the NML channels,
# so it needs to start by default, as the first process
EMCSERVER=linuxcncsvr

# 2.7. get halui information
GetFromIniQuiet HALUI HAL
HALUI=$retval

# 2.9. get display information
GetFromIni DISPLAY DISPLAY
EMCDISPLAY=`(set -- $retval ; echo $1 )`
EMCDISPLAYARGS=`(set -- $retval ; shift ; echo $* )`

case $EMCDISPLAY in
    tkemc) EMCDISPLAY=tklinuxcnc ;;
    xemc) EMCDISPLAY=xlinuxcnc ;;
esac

# 2.10. get NML config information
GetFromIniEx NML_FILE LINUXCNC NML_FILE EMC @DEFAULT_NMLFILE@
NMLFILE=$retval
export NMLFILE

################################################################################
# 3. Done gathering information, define a few functions
# Execution resumes after function definitions...
################################################################################

KILL_TASK=
KILL_TIMEOUT=20

################################################################################
# 3.1. Kills a list of tasks with timeout
# if it doesn't work, kill -9 is used
################################################################################
function KillTaskWithTimeout() {
    echo "kill task was called"
}

################################################################################
# 3.2. define the cleanup function
#
# this cleanup function doesn't know or care what was actually
# loaded - it simply kills _any_ processes in its list of
# components
################################################################################
function Cleanup(){
    rm -f $LOCKFILE;
    return 0;
}

################################################################################
# 4. done with function definitions, execution resumes here
################################################################################

# Name of lock file to check for that signifies that LinuxCNC is up,
# to prevent multiple copies of controller
LOCKFILE=/tmp/linuxcnc.lock


# Check for lock file
if [ -f $LOCKFILE ]; then
  if tty -s; then
    echo -n "LinuxCNC is still running.  Restart it? [Y/n] "
    read input; [ -z $input ] && input=y
  else
  input=y
  fi
  case $input in
    y|Y|yes)
      Cleanup other
      echo You want to clean up old LinuxCNC,as your wish.
      exit 0
    ;;
    *)
      echo Not starting new LinuxCNC
      exit 0
    ;;
  esac
fi
echo Starting LinuxCNC...


# trap ^C so that it's called if user interrupts script
trap 'Cleanup ; exit 0' SIGINT SIGTERM

#cd "$INI_DIR"

# Create the lock file
touch $LOCKFILE

################################################################################
# 4.1. pop up intro graphic
################################################################################

################################################################################
# 4.2. Now we can finally start loading LinuxCNC
################################################################################

# 4.3.1. Run linuxcncserver in background, always (it owns/creates the NML buffers)
echo "Starting LinuxCNC server program: $EMCSERVER" >>$PRINT_FILE
if ! program_available $EMCSERVER; then
    echo "Can't execute server program $EMCSERVER"
    Cleanup
    exit 1
fi
export INI_FILE_NAME="$INIFILE"
$EMCSERVER -ini "$INIFILE" &
sleep 1

# 4.3.2. Start REALTIME
echo "Loading Real Time OS, RTAPI, and HAL_LIB modules" >>$PRINT_FILE
if ! $REALTIME start ; then
    echo "Realtime system did not load"
    Cleanup
    exit -1
fi

# 4.3.3. export the location of the HAL realtime modules so that
# "halcmd loadrt" can find them
export HAL_RTMOD_DIR=$LINUXCNC_RTLIB_DIR

# 4.3.4. Run io in background if so defined in INI
if [ "$EMCIO" != "" ] ; then
        echo "Starting LinuxCNC IO program: $EMCIO" >>$PRINT_FILE
        if ! program_available $EMCIO ; then
                echo "Can't execute IO program $EMCIO"
                Cleanup
        exit 1
        fi
        $HALCMD loadusr -Wn iocontrol $EMCIO -ini "$INIFILE"
else
        echo "Skipping LinuxCNC IO program >>$PRINT_FILE"
fi
